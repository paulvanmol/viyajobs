{"creationTimeStamp":"2023-08-31T12:51:30.053Z","modifiedTimeStamp":"2023-08-31T12:51:30.054Z","createdBy":"paul.van.mol@sas.com","modifiedBy":"paul.van.mol@sas.com","version":2,"id":"c564b335-028f-44c9-8bca-34a465ae4eff","name":"Fuel Efficiency by Type and Origin","type":"Compute","parameters":[{"version":1,"name":"origin","defaultValue":"_ALL_VALUES_","type":"CHARACTER","label":"origin","required":true},{"version":1,"name":"_action","defaultValue":"form,prompts,execute","type":"CHARACTER","label":"","required":false},{"version":1,"name":"_output_type","defaultValue":"html","type":"CHARACTER","label":"","required":false},{"version":1,"name":"_migrated_stp","defaultValue":"true","type":"CHARACTER","label":"","required":false}],"code":"*  Begin EG generated code (do not edit this line); \n* \n*  Stored process registered by \n*  Enterprise Guide Stored Process Manager V8.3 \n* \n*  ==================================================================== \n*  Stored process name: Fuel Efficiency by Type and Origin \n*  ==================================================================== \n* \n*  Stored process prompt dictionary: \n*  ____________________________________ \n*  ORIGIN \n*       Type: Text \n*      Label: origin \n*       Attr: Visible, Required \n*    Default: <ALL> \n*  ____________________________________ \n*; \n \n \n*ProcessBody; \n \n%global ORIGIN; \n \n%STPBEGIN; \n \n*  End EG generated code (do not edit this line); \n \n \n/* --- Start of shared macro functions. --- */ \n/* Conditionally delete set of tables or views, if they exists          */ \n/* If the member does not exist, then no action is performed   */ \n%macro _eg_conditional_dropds /parmbuff; \n  \n    %local num; \n    %local stepneeded; \n    %local stepstarted; \n    %local dsname; \n %local name; \n \n    %let num=1; \n /* flags to determine whether a PROC SQL step is needed */ \n /* or even started yet                                  */ \n %let stepneeded=0; \n %let stepstarted=0; \n    %let dsname= %qscan(&syspbuff,&num,',()'); \n %do %while(&dsname ne);  \n  %let name = %sysfunc(left(&dsname)); \n  %if %qsysfunc(exist(&name)) %then %do; \n   %let stepneeded=1; \n   %if (&stepstarted eq 0) %then %do; \n    proc sql; \n    %let stepstarted=1; \n \n   %end; \n    drop table &name; \n  %end; \n \n  %if %sysfunc(exist(&name,view)) %then %do; \n   %let stepneeded=1; \n   %if (&stepstarted eq 0) %then %do; \n    proc sql; \n    %let stepstarted=1; \n   %end; \n    drop view &name; \n  %end; \n  %let num=%eval(&num+1); \n       %let dsname=%qscan(&syspbuff,&num,',()'); \n %end; \n %if &stepstarted %then %do; \n  quit; \n %end; \n%mend _eg_conditional_dropds; \n \n/* Build where clauses from stored process parameters */ \n%macro _eg_WhereParam( COLUMN, PARM, OPERATOR, TYPE=S, MATCHALL=_ALL_VALUES_, MATCHALL_CLAUSE=1, MAX= , IS_EXPLICIT=0, MATCH_CASE=1); \n \n  %local q1 q2 sq1 sq2; \n  %local isEmpty; \n  %local isEqual isNotEqual; \n  %local isIn isNotIn; \n  %local isString; \n  %local isBetween; \n \n  %let isEqual = (\"%QUPCASE(&OPERATOR)\" = \"EQ\" OR \"&OPERATOR\" = \"=\"); \n  %let isNotEqual = (\"%QUPCASE(&OPERATOR)\" = \"NE\" OR \"&OPERATOR\" = \"<>\"); \n  %let isIn = (\"%QUPCASE(&OPERATOR)\" = \"IN\"); \n  %let isNotIn = (\"%QUPCASE(&OPERATOR)\" = \"NOT IN\"); \n  %let isString = (%QUPCASE(&TYPE) eq S or %QUPCASE(&TYPE) eq STRING ); \n  %if &isString %then \n  %do; \n %if \"&MATCH_CASE\" eq \"0\" %then %do; \n  %let COLUMN = %str(UPPER%(&COLUMN%)); \n %end; \n %let q1=%str(%\"); \n %let q2=%str(%\"); \n %let sq1=%str(%');  \n %let sq2=%str(%');  \n  %end; \n  %else %if %QUPCASE(&TYPE) eq D or %QUPCASE(&TYPE) eq DATE %then  \n  %do; \n    %let q1=%str(%\"); \n    %let q2=%str(%\"d); \n %let sq1=%str(%');  \n    %let sq2=%str(%');  \n  %end; \n  %else %if %QUPCASE(&TYPE) eq T or %QUPCASE(&TYPE) eq TIME %then \n  %do; \n    %let q1=%str(%\"); \n    %let q2=%str(%\"t); \n %let sq1=%str(%');  \n    %let sq2=%str(%');  \n  %end; \n  %else %if %QUPCASE(&TYPE) eq DT or %QUPCASE(&TYPE) eq DATETIME %then \n  %do; \n    %let q1=%str(%\"); \n    %let q2=%str(%\"dt); \n %let sq1=%str(%');  \n    %let sq2=%str(%');  \n  %end; \n  %else \n  %do; \n    %let q1=; \n    %let q2=; \n %let sq1=; \n    %let sq2=; \n  %end; \n   \n  %if \"&PARM\" = \"\" %then %let PARM=&COLUMN; \n \n  %let isBetween = (\"%QUPCASE(&OPERATOR)\"=\"BETWEEN\" or \"%QUPCASE(&OPERATOR)\"=\"NOT BETWEEN\"); \n \n  %if \"&MAX\" = \"\" %then %do; \n    %let MAX = &parm._MAX; \n    %if &isBetween %then %let PARM = &parm._MIN; \n  %end; \n \n  %if not %symexist(&PARM) or (&isBetween and not %symexist(&MAX)) %then %do; \n    %if &IS_EXPLICIT=0 %then %do; \n  not &MATCHALL_CLAUSE \n %end; \n %else %do; \n     not 1=1 \n %end; \n  %end; \n  %else %if \"%qupcase(&&&PARM)\" = \"%qupcase(&MATCHALL)\" %then %do; \n    %if &IS_EXPLICIT=0 %then %do; \n     &MATCHALL_CLAUSE \n %end; \n %else %do; \n     1=1 \n %end;  \n  %end; \n  %else %if (not %symexist(&PARM._count)) or &isBetween %then %do; \n    %let isEmpty = (\"&&&PARM\" = \"\"); \n    %if (&isEqual AND &isEmpty AND &isString) %then \n       &COLUMN is null; \n    %else %if (&isNotEqual AND &isEmpty AND &isString) %then \n       &COLUMN is not null; \n    %else %do; \n    %if &IS_EXPLICIT=0 %then %do; \n           &COLUMN &OPERATOR  \n   %if \"&MATCH_CASE\" eq \"0\" %then %do; \n    %unquote(&q1)%QUPCASE(&&&PARM)%unquote(&q2) \n   %end; \n   %else %do; \n    %unquote(&q1)&&&PARM%unquote(&q2) \n   %end; \n    %end; \n    %else %do; \n        &COLUMN &OPERATOR  \n   %if \"&MATCH_CASE\" eq \"0\" %then %do; \n    %unquote(%nrstr(&sq1))%QUPCASE(&&&PARM)%unquote(%nrstr(&sq2)) \n   %end; \n   %else %do; \n    %unquote(%nrstr(&sq1))&&&PARM%unquote(%nrstr(&sq2)) \n   %end; \n    %end; \n       %if &isBetween %then  \n          AND %unquote(&q1)&&&MAX%unquote(&q2); \n    %end; \n  %end; \n  %else  \n  %do; \n %local emptyList; \n   %let emptyList = %symexist(&PARM._count); \n   %if &emptyList %then %let emptyList = &&&PARM._count = 0; \n %if (&emptyList) %then \n %do; \n  %if (&isNotin) %then \n     1; \n  %else \n   0; \n %end; \n %else %if (&&&PARM._count = 1) %then  \n    %do; \n      %let isEmpty = (\"&&&PARM\" = \"\"); \n      %if (&isIn AND &isEmpty AND &isString) %then \n        &COLUMN is null; \n      %else %if (&isNotin AND &isEmpty AND &isString) %then \n        &COLUMN is not null; \n      %else %do; \n     %if &IS_EXPLICIT=0 %then %do; \n   %if \"&MATCH_CASE\" eq \"0\" %then %do; \n    &COLUMN &OPERATOR (%unquote(&q1)%QUPCASE(&&&PARM)%unquote(&q2)) \n   %end; \n   %else %do; \n    &COLUMN &OPERATOR (%unquote(&q1)&&&PARM%unquote(&q2)) \n   %end; \n     %end; \n  %else %do; \n      &COLUMN &OPERATOR ( \n   %if \"&MATCH_CASE\" eq \"0\" %then %do; \n    %unquote(%nrstr(&sq1))%QUPCASE(&&&PARM)%unquote(%nrstr(&sq2))) \n   %end; \n   %else %do; \n    %unquote(%nrstr(&sq1))&&&PARM%unquote(%nrstr(&sq2))) \n   %end; \n  %end; \n   %end; \n    %end; \n    %else  \n    %do; \n       %local addIsNull addIsNotNull addComma; \n       %let addIsNull = %eval(0); \n       %let addIsNotNull = %eval(0); \n       %let addComma = %eval(0); \n       (&COLUMN &OPERATOR (  \n       %do i=1 %to &&&PARM._count;  \n          %let isEmpty = (\"&&&PARM&i\" = \"\"); \n          %if (&isString AND &isEmpty AND (&isIn OR &isNotIn)) %then \n          %do; \n             %if (&isIn) %then %let addIsNull = 1; \n             %else %let addIsNotNull = 1; \n          %end; \n          %else \n          %do;        \n            %if &addComma %then %do;,%end; \n   %if &IS_EXPLICIT=0 %then %do; \n    %if \"&MATCH_CASE\" eq \"0\" %then %do; \n     %unquote(&q1)%QUPCASE(&&&PARM&i)%unquote(&q2) \n    %end; \n    %else %do; \n     %unquote(&q1)&&&PARM&i%unquote(&q2) \n    %end; \n   %end; \n   %else %do; \n    %if \"&MATCH_CASE\" eq \"0\" %then %do; \n     %unquote(%nrstr(&sq1))%QUPCASE(&&&PARM&i)%unquote(%nrstr(&sq2)) \n    %end; \n    %else %do; \n     %unquote(%nrstr(&sq1))&&&PARM&i%unquote(%nrstr(&sq2)) \n    %end;  \n   %end; \n            %let addComma = %eval(1); \n          %end; \n       %end;)  \n       %if &addIsNull %then OR &COLUMN is null; \n       %else %if &addIsNotNull %then AND &COLUMN is not null; \n       %do;) \n       %end; \n    %end; \n  %end; \n%mend _eg_WhereParam; \n \n/* --- End of shared macro functions. --- */ \n \n/* --- Start of code for \"Query Builder\". --- */ \n%_eg_conditional_dropds(WORK.QUERY_FOR_CARS); \n \nPROC SQL; \n   CREATE TABLE WORK.QUERY_FOR_CARS AS  \n   SELECT t1.Make,  \n          t1.Model,  \n          t1.Type,  \n          t1.Origin,  \n          t1.DriveTrain,  \n          t1.MSRP,  \n          t1.Invoice,  \n          t1.EngineSize,  \n          t1.Cylinders,  \n          t1.Horsepower,  \n          t1.MPG_City,  \n          t1.MPG_Highway,  \n          t1.Weight,  \n          t1.Wheelbase,  \n          t1.Length \n      FROM SASHELP.CARS t1 \n      WHERE %_eg_WhereParam( t1.Origin, origin, EQ, TYPE=S, IS_EXPLICIT=0 ); \nQUIT; \n/* --- End of code for \"Query Builder\". --- */ \n \n/* --- Start of code for \"Summary Statistics\". --- */ \n/* ------------------------------------------------------------------- \n   Code generated by SAS Task \n \n   Generated on: Monday, August 28, 2023 at 2:12:08 AM \n   By task: Summary Statistics \n \n   Input Data: SASApp:WORK.QUERY_FOR_CARS \n   Server:  SASApp \n   ------------------------------------------------------------------- */ \n \n \n/* Start of custom user code */ \nods noproctitle; \n/* End of custom user code */ \n%_eg_conditional_dropds(WORK.SORTTempTableSorted); \n/* ------------------------------------------------------------------- \n   Sort data set SASApp:WORK.QUERY_FOR_CARS \n   ------------------------------------------------------------------- */ \n \nPROC SQL; \n CREATE VIEW WORK.SORTTempTableSorted AS \n  SELECT T.MPG_Highway, T.Type \n FROM WORK.QUERY_FOR_CARS as T \n; \nQUIT; \n/* ------------------------------------------------------------------- \n   Run the Means Procedure \n   ------------------------------------------------------------------- */ \nTITLE; \nTITLE1 \"Summary statistics grouped by Type  for Origin &origin\"; \nFOOTNOTE; \nPROC MEANS DATA=WORK.SORTTempTableSorted \n FW=12 \n PRINTALLTYPES \n CHARTYPE \n NWAY \n VARDEF=DF   \n  MEAN  \n  STD  \n  MIN  \n  MAX  \n  N ; \n VAR MPG_Highway; \n CLASS Type / ORDER=UNFORMATTED ASCENDING; \n \nRUN; \nODS GRAPHICS ON; \nTITLE; \nTITLE1 \"Summary Statistics\"; \nTITLE2 \"Box and Whisker Plots\"; \nPROC SGPLOT DATA=WORK.SORTTempTableSorted ; \n VBOX MPG_Highway / category=Type; \nRUN;QUIT; \nODS GRAPHICS OFF; \n/* ------------------------------------------------------------------- \n   End of task code \n   ------------------------------------------------------------------- */ \nRUN; QUIT; \n%_eg_conditional_dropds(WORK.SORTTempTableSorted); \nTITLE; FOOTNOTE; \n \n/* --- End of code for \"Summary Statistics\". --- */ \n \n*  Begin EG generated code (do not edit this line); \n;*';*\";*/;quit; \n%STPEND; \n \n*  End EG generated code (do not edit this line); \n","links":[{"method":"GET","rel":"self","href":"/jobDefinitions/definitions/c564b335-028f-44c9-8bca-34a465ae4eff","uri":"/jobDefinitions/definitions/c564b335-028f-44c9-8bca-34a465ae4eff","type":"application/vnd.sas.job.definition"},{"method":"GET","rel":"alternate","href":"/jobDefinitions/definitions/c564b335-028f-44c9-8bca-34a465ae4eff","uri":"/jobDefinitions/definitions/c564b335-028f-44c9-8bca-34a465ae4eff","type":"application/vnd.sas.summary"},{"method":"PUT","rel":"update","href":"/jobDefinitions/definitions/c564b335-028f-44c9-8bca-34a465ae4eff","uri":"/jobDefinitions/definitions/c564b335-028f-44c9-8bca-34a465ae4eff","type":"application/vnd.sas.job.definition","responseType":"application/vnd.sas.job.definition"},{"method":"DELETE","rel":"delete","href":"/jobDefinitions/definitions/c564b335-028f-44c9-8bca-34a465ae4eff","uri":"/jobDefinitions/definitions/c564b335-028f-44c9-8bca-34a465ae4eff"}],"properties":[{"name":"prompts_v2","value":"{\n  \"syntaxversion\" : \"1.0.0\",\n  \"showPageContentOnly\" : false,\n  \"pages\" : [ {\n    \"id\" : \"page1\",\n    \"type\" : \"page\",\n    \"label\" : \"Page 1\",\n    \"children\" : [ {\n      \"id\" : \"Option2\",\n      \"type\" : \"text\",\n      \"visible\" : \"\",\n      \"text\" : \"General\"\n    }, {\n      \"id\" : \"origin\",\n      \"type\" : \"dropdown\",\n      \"label\" : \"origin\",\n      \"placeholder\" : \"\",\n      \"required\" : true,\n      \"visible\" : \"\",\n      \"items\" : [ {\n        \"value\" : \"Asia\",\n        \"label\" : \"Asia\"\n      }, {\n        \"value\" : \"Europe\",\n        \"label\" : \"Europe\"\n      }, {\n        \"value\" : \"USA\",\n        \"label\" : \"USA\"\n      } ]\n    } ]\n  }, {\n    \"id\" : \"page8\",\n    \"type\" : \"page\",\n    \"label\" : \"Conversion Report\",\n    \"children\" : [ {\n      \"id\" : \"section3\",\n      \"type\" : \"section\",\n      \"label\" : \"origin / origin\",\n      \"visible\" : \"\",\n      \"open\" : true,\n      \"children\" : [ {\n        \"id\" : \"text4\",\n        \"type\" : \"text\",\n        \"visible\" : \"\",\n        \"text\" : \"WARNING: Prompt JSON does not currently support allowAllValues attribute\"\n      }, {\n        \"id\" : \"text5\",\n        \"type\" : \"text\",\n        \"visible\" : \"\",\n        \"text\" : \"WARNING: Prompt JSON does not currently support editable attribute\"\n      }, {\n        \"id\" : \"text6\",\n        \"type\" : \"text\",\n        \"visible\" : \"\",\n        \"text\" : \"WARNING: Prompt XML does not currently support Special or Missing values as a default value. The default value will be cleared. (promptName=origin, promptID=PromptDef_1693188451540_790923)\"\n      } ]\n    } ]\n  } ],\n  \"values\" : {\n    \"origin\" : [ ]\n  }\n}"},{"name":"prompts","value":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<Task schemaVersion=\"7.2\">\n    <!--Generated by Prompt Converter 1.2-->\n    <!--WARNING:Prompt xml does not currently support Special or Missing values as a default value. The default value will be cleared. (promptName=origin, promptID=PromptDef_1693188451540_790923)-->\n    <Registration>\n        <Name>Conversion Task</Name>\n        <Description>SAS Version 9 Prompt to SPI converter</Description>\n        <Version>5.11</Version>\n    </Registration>\n    <Metadata>\n        <Options>\n            <!--group option \"General\"-->\n            <Option inputType=\"string\" name=\"Option2\">General</Option>\n            <!--combobox option for promptName=\"origin\", promptID=\"PromptDef_1693188451540_790923\"-->\n            <Option allowAllValues=\"true\" editable=\"false\" inputType=\"combobox\" name=\"origin\" required=\"true\">origin</Option>\n            <Option inputType=\"string\" name=\"Option3\" returnValue=\"Asia\">Asia</Option>\n            <Option inputType=\"string\" name=\"Option4\" returnValue=\"Europe\">Europe</Option>\n            <Option inputType=\"string\" name=\"Option5\" returnValue=\"USA\">USA</Option>\n        </Options>\n        <DataSources/>\n    </Metadata>\n    <UI>\n        <OptionItem option=\"Option2\"/>\n        <!--combobox option-->\n        <OptionChoice option=\"origin\">\n            <OptionItem option=\"Option3\"/>\n            <OptionItem option=\"Option4\"/>\n            <OptionItem option=\"Option5\"/>\n        </OptionChoice>\n    </UI>\n    <OptionDependencies/>\n</Task>\n"}]}
