{"creationTimeStamp":"2023-05-02T13:28:53.158Z","modifiedTimeStamp":"2023-05-04T15:50:58.033Z","createdBy":"gerdaw","modifiedBy":"gerdaw","name":"Extract Job Definition Metadata.step","displayName":"Extract Job Definition Metadata.step","localDisplayName":"Extract Job Definition Metadata.step","description":"Extract the parts of a SAS Job Definition, this can be parameters, forms, prompts and/or code.","localDescription":"Extract the parts of a SAS Job Definition, this can be parameters, forms, prompts and/or code.","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","uri":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","uri":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","uri":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","uri":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","uri":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","uri":"/dataFlows/steps/409cad3b-fc51-4510-8b7d-296f50853078","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Setup\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"SAS Job Definitions are stored in SAS Content. Please navigate to the Job Definition you want the content to be extracted from:\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sasViyaJobFile\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Select a SAS Job Definition:\",\n\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\"placeholder\": \"SAS Job Definition\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"The target folder needs to be under SAS Server to make use of the filesystem. All content will be stored in the target folder. As a single job can generate up to five files, it can be useful to store jobs in separate subfolders.\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"targetFolder\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Select a folder in SAS Server as a target:\",\n\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\"placeholder\": \"SAS Server folder\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Extract the parts of a SAS Job Definition, this can be parameters, forms, prompts and/or code. The extraction also includes the complete json file of the SAS Job Definition.\\n\\nIf you want to version the extracted content using Git, please make use of the Git Repositories pane in SAS Studio or use the appropriate Git Custom Step from https://github.com/sassoftware/sas-studio-custom-steps.\\n\\nThis custom step was created by David.Weik@sas.com\\n\\nVersion 1.0 (04MAY2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"sasViyaJobFile\": \"\",\n\t\t\"targetFolder\": \"\"\n\t}\n}","templates":{"SAS":"* Get the Viya Host URL;\n%let viyaHost=%sysfunc(getoption(SERVICESBASEURL));\n\n* Extract the path + filename from the tagert folder;\n* Also abort if the wrong type was selected;\ndata _null_;\n\tsasViyaJobFile = scan(\"&sasViyaJobFile.\", 1, ':', 'MO');\n\tif upcase(sasViyaJobFile) ne 'SASCONTENT' then do;\n\t\tputlog 'ERROR: Please select a folder stored in SAS Content for the SAS Job location';\n\t\tabort;\n\tend;\n\n\ttargetFolderType = scan(\"&targetFolder.\", 1, ':', 'MO');\n\tif upcase(targetFolderType) ne 'SASSERVER' then do;\n\t\tputlog 'ERROR: Please select a folder stored in SAS Server as the target folder';\n\t\tabort;\n\tend;\n\tcall symput(\"targetFolder\",scan(\"&targetFolder.\", 2, ':', 'MO'));\nrun;\n\n* Macro to check the HTTP Status response;\n%macro checkHTTPStatus(status_code, status_phrase);\n\t%local status_code\n\t\tstatus_phrase;\n\n\t* HTTP Status Handling;\n\tdata _null_;\n\t\tif &status_code. eq 200 then\n\t\t\tdo;\n\t\t\t\tputlog 'NOTE: The request was  successful.';\n\t\t\t\tputlog \"NOTE: The HTTP Status Code is &status_code..\";\n\t\t\t\tputlog \"NOTE: That means: &status_phrase..\";\n\t\t\tend;\n\t\telse\n\t\t\tdo;\n\t\t\t\tputlog 'ERROR: The request was not successful. Please check the Job Definition path';\n\t\t\t\tputlog \"ERROR: The HTTP Status Code is &status_code..\";\n\t\t\t\tputlog \"ERROR: That means: &status_phrase..\";\n\t\t\t\tabort;\n\t\t\tend;\n\trun;\n%mend checkHTTPStatus;\n\n* JSON Request Data;\nfilename pathData temp;\n\n* Remove sascontent from the File location - added by the File Selector Input;\n* Create the Input JSON for the POST Call;\ndata _null_;\n\tlength dataIn $32000. numberOfSlashes 8.;\n\tsasViyaJobFile = substr(\"&sasViyaJobFile.\", find(\"&sasViyaJobFile.\", ':') + 1);\n\tnumberOfSlashes = count(sasViyaJobFile, '/');\n\n\t* Build the JSON Request Data;\n\tfile pathData;\n\tdataIn = '{\"items\": [';\n\n\t* Separate the elements of the Path;\n\t_counter = 1;\n\tdo while(_counter <= numberOfSlashes);\n\t\tif _counter = 1 then dataIn = strip(dataIn) || '\"' || strip(scan(sasViyaJobFile, _counter, '/')) || '\"';\n\t\telse dataIn = strip(dataIn) || ',\"' || strip(scan(sasViyaJobFile, _counter, '/')) || '\"';\n\n\t\tif _counter = numberOfSlashes then call symputx('_fileName', strip(scan(sasViyaJobFile, numberOfSlashes, '/')));\n\n\t\t_counter + 1;\n\tend;\n\n\tdataIn = strip(dataIn) || '], \"contentType\": \"jobDefinition\"}';\n\n\t* Write to the file;\n\tput dataIn;\n\n\tcall symputx('sasViyaJobFile', sasViyaJobFile);\nrun;\n\n* Create a temporary file;\nfilename outResp temp;\n \n* Find the Folder Member URI of the Job;\nproc http\n\tmethod='POST'\n\turl=\"&viyaHost./folders/paths\"\n\tin=pathData\n\toauth_bearer=sas_services\n\tout=outResp;\n\theaders 'Content-Type'=' application/vnd.sas.content.folder.path+json';\nrun;\n\n%checkHTTPStatus(&SYS_PROCHTTP_STATUS_CODE., &SYS_PROCHTTP_STATUS_PHRASE.);\n\n* Create a JSON library from response;\nlibname outResp json;\n\n* Get the URI of the file;\ndata _null_;\n\tset outResp.links(obs=1);\n\tcall symput('_fileDescriptor', trim(uri));\nrun;\n\n* Clear file & lib to reuse;\nfilename pathData clear;\nfilename outResp clear;\nlibname outResp clear;\n\n* Create a temporary file;\nfilename outResp temp;\n\n* Get the file URI;\nproc http\n\tmethod='GET'\n\turl=\"&viyaHost.&_fileDescriptor.\"\n\toauth_bearer=sas_services\n\tout=outResp;\n\theaders 'Content-Type'=' application/json';\nrun;\n\n%checkHTTPStatus(&SYS_PROCHTTP_STATUS_CODE., &SYS_PROCHTTP_STATUS_PHRASE.);\n\n* Create a JSON library from response;\nlibname outResp json;\n\n* Get the URI of the Job Definition;\ndata _null_;\n\tset outResp.alldata(where=(p1='uri'));\n\tcall symput('_jobDefinition', trim(value));\nrun;\n\n* Clear file & lib to reuse;\nfilename outResp clear;\nlibname outResp clear;\n\n* Create a temporary file;\nfilename outResp temp;\n\n* Get the jobDefinition;\nproc http\n\tmethod='GET'\n\turl=\"&viyaHost.&_jobDefinition.\"\n\toauth_bearer=sas_services\n\tout=outResp;\n\theaders 'Content-Type'=' application/json';\nrun;\n\n%checkHTTPStatus(&SYS_PROCHTTP_STATUS_CODE., &SYS_PROCHTTP_STATUS_PHRASE.);\n\n* Write complete job definition as json;\nfilename jbdef \"&targetFolder./&_fileName..json\";\n\t\ndata _null_;\n\tinfile outResp;\n\tfile jbdef;\n\tinput;\n\tput _infile_;\nrun;\n\t\nfilename jbdef clear;\n\n* Create a JSON library from response;\nlibname outResp json;\n\n* Initialize the checks for different save types;\n%let _hasParams = 0;\n%let _hasCode = 0;\n%let _hasForm = 0;\n%let _hasPrompt = 0;\n\n* Check what content is available to save;\ndata _null_;\n\tset outResp.alldata(keep=p1 value);\n\n\tif p1 = 'parameters' then call symput('_hasParams', 1);\n\telse if p1 = 'code' then call symput('_hasCode', 1);\n\n\tif value = 'form' then call symput('_hasForm', 1);\n\telse if value = 'prompts' then call symput('_hasPrompt', 1);\nrun;\n\n* Save the parameters to the folder;\n%if &_hasParams. %then %do;\n\tfilename params \"&targetFolder./&_fileName..txt\";\n\t\n\tdata _null_;\n\t\tlength outLine $32000.;\n\t\tset outResp.parameters(drop=ordinal_root ordinal_parameters version);\n\t\tfile params;\n\t\toutLine = 'name: ' || name || '; defaultValue: ' || defaultValue || '; type: ' || type || '; required: ' || required;\n\t\tput outLine;\n\trun;\n\t\n\tfilename params clear;\n%end;\n\n* Save the code to the folder;\n%if &_hasCode. %then %do;\n\tfilename code \"&targetFolder./&_fileName..sas\";\n\t\n\tdata _null_;\n\t\tset outResp.alldata(where=(p1='code'));\n\t\tfile code;\n\t\tput value;\n\trun;\n\t\n\tfilename code clear;\n%end;\n\n* Save the form to the folder;\n%if &_hasForm. %then %do;\n\tfilename form \"&targetFolder./&_fileName..html\";\n\t\n\tdata _null_;\n\t\tset outResp.properties(where=(name='form'));\n\t\tfile form;\n\t\tput value;\n\trun;\n\t\n\tfilename form clear;\n%end;\n\n* Save the prompt to the folder;\n%if &_hasPrompt. %then %do;\n\tfilename xml \"&targetFolder./&_fileName..xml\";\n\t\n\tdata _null_;\n\t\tset outResp.properties(where=(name='prompt'));\n\t\tfile xml;\n\t\tput value;\n\trun;\n\t\n\tfilename xml clear;\n%end;\n\n* Create a message for the user;\ndata work._ejm_result;\n\tlength resultString $1000.;\n\tresultString = \"All results were saved here: &targetFolder.\";\n\toutput;\n\tresultString = \"The Job Definition was saved as: &_fileName..json\";\n\toutput;\n\tif &_hasParams. then do;\n\t\tresultString = \"The Job Parameters were saved as: &_fileName..txt\";\n\t\toutput;\n\tend;\n\tif &_hasCode. then do;\n\t\tresultString = \"The Job Code was saved as: &_fileName..sas\";\n\t\toutput;\n\tend;\n\tif &_hasForm. then do;\n\t\tresultString = \"The Job Form was saved as: &_fileName..html\";\n\t\toutput;\n\tend;\n\tif &_hasPrompt. then do;\n\t\tresultString = \"The Job Promp was saved as: &_fileName..xml\";\n\t\toutput;\n\tend;\nrun;\n\nods listing close;\nods html5;\ntitle1 'Result files of the job metadata extraction';\n\nproc report data=work._ejm_result noheader;\nrun;\n\ntitle;\nods html5 close;\n\n* Clean up;\nfilename outResp clear;\nlibname outResp clear;\n%symdel _fileName _fileDescriptor _jobDefinition _hasParams _hasCode _hasForm _hasPrompt;\n%sysmacdelete checkHTTPStatus;\nproc datasets library=work nolist;\n\tdelete _ejm_result;\nrun;"}}